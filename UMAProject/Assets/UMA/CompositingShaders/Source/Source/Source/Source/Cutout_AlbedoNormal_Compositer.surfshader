#pragma enable_d3d11_debug_symbols
BEGIN_OPTIONS
   ShaderName "UMA/Compositing/Albedo_Normal Cutout"
   Tags { "RenderType" = "TransparentCutout" "Queue" = "AlphaTest" }  // tags are always in standard pipeline style
END_OPTIONS

BEGIN_PROPERTIES
	_OverlayCount ("OverlayCount", Float) = 0
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_Cutout ("Cutout",Range(0,1)) = 0.5

   [NoScaleOffset]_Albedo("Albedo", 2D) = "white" {}
   [NoScaleOffset]_Albedo1("Albedo1", 2D) = "white" {}
   [NoScaleOffset]_Albedo2("Albedo2", 2D) = "white" {}
   [NoScaleOffset]_Albedo3("Albedo3", 2D) = "white" {}

   [Normal][NoScaleOffset]_Normal("Normal", 2D) = "bump" {}
   [Normal][NoScaleOffset]_Normal1("Normal1", 2D) = "bump" {}
   [Normal][NoScaleOffset]_Normal2("Normal2", 2D) = "bump" {}
   [Normal][NoScaleOffset]_Normal3("Normal2", 2D) = "bump" {}
   
   // no AlphaMask for the base.
   [NoScaleOffset]_AlphaMask1("Mask1", 2D) = "white" {} 
   [NoScaleOffset]_AlphaMask2("Mask2", 2D) = "white" {} 
   [NoScaleOffset]_AlphaMask3("Mask3", 2D) = "white" {} 

END_PROPERTIES


// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
    half  _OverlayCount;
	half  _ColorModulation;
	half  _Cutout;

	float4 ColorTints[12];
	float4 ColorAdds[12];
END_CBUFFER


// if you are writing a subshader, any defines that should be set on the main
// shader are defined here
BEGIN_DEFINES
END_DEFINES


// All code goes here

BEGIN_CODE

   TEXTURE2D(_Albedo);
   SAMPLER(sampler_Albedo);
   TEXTURE2D(_Normal);
   SAMPLER(sampler_Normal);

   TEXTURE2D(_Albedo1);
   TEXTURE2D(_Normal1);
   TEXTURE2D(_AlphaMask1);

   TEXTURE2D(_Albedo2);
   TEXTURE2D(_Normal2);
   TEXTURE2D(_AlphaMask2);

   TEXTURE2D(_Albedo3);
   TEXTURE2D(_Normal3);
   TEXTURE2D(_AlphaMask3);

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 uv = d.texcoord0.xy;

	  half4 base_c = (SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, uv)  * ColorTints[0]) + ColorAdds[0];
	  clip(base_c.a - _Cutout);


	  half3 base_n = (UnpackNormal(SAMPLE_TEXTURE2D(_Normal, sampler_Normal, uv)) * ColorTints[1]).rgb + ColorAdds[1].rgb;
	  o.Alpha = base_c.a; 

	  if (_OverlayCount > 1)
	  {
		  half4 add_c = (SAMPLE_TEXTURE2D(_Albedo1, sampler_Albedo, uv) * ColorTints[2]) + ColorAdds[2];
		  half3 add_n = (UnpackNormal(SAMPLE_TEXTURE2D(_Normal1, sampler_Normal, uv)) * ColorTints[3]).rgb + ColorAdds[3].rgb;
          
		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask1, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
	  }

	  if (_OverlayCount > 2)
	  {
		  half4 add_c = (SAMPLE_TEXTURE2D(_Albedo2, sampler_Albedo, uv) * ColorTints[4]) + ColorAdds[4];
		  half3 add_n = (UnpackNormal(SAMPLE_TEXTURE2D(_Normal2, sampler_Normal, uv)) * ColorTints[5]).rgb + ColorAdds[5].rgb;
          
		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask2, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
	  }

	  if (_OverlayCount > 3)
	  {
		  half4 add_c = (SAMPLE_TEXTURE2D(_Albedo3, sampler_Albedo, uv) * ColorTints[6]) + ColorAdds[6];
		  half3 add_n = (UnpackNormal(SAMPLE_TEXTURE2D(_Normal3, sampler_Normal, uv)) * ColorTints[7]).rgb + ColorAdds[7].rgb;
          
		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask3, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
	  }
	  

      o.Albedo = base_c * _ColorModulation;
	  o.Normal = base_n;
	}

END_CODE

