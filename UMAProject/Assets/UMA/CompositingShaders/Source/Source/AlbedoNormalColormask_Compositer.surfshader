#pragma enable_d3d11_debug_symbols
BEGIN_OPTIONS
   ShaderName "UMA/Compositing/Albedo_NormalMask_ColorMaskz"
END_OPTIONS

BEGIN_PROPERTIES
	_OverlayCount ("OverlayCount", Float) = 0
	_ColorModulation ("Color Modulation", Range(0,2)) = 1
	_MetallicModulation ("Metallic Level", Range(0,2)) = 1
	_SmoothnessModulation ("Smoothness Level", Range(0,2)) = 1

   [NoScaleOffset]_Albedo("Albedo", 2D) = "white" {}
   [NoScaleOffset]_Albedo1("Albedo1", 2D) = "white" {}
   [NoScaleOffset]_Albedo2("Albedo2", 2D) = "white" {}
   [NoScaleOffset]_Albedo3("Albedo3", 2D) = "white" {}

   [NoScaleOffset]_NormalMask("NormalMask", 2D) = "bump" {}
   [NoScaleOffset]_NormalMask1("NormalMask1", 2D) = "bump" {}
   [NoScaleOffset]_NormalMask2("NormalMask2", 2D) = "bump" {}
   [NoScaleOffset]_NormalMask3("NormalMask3", 2D) = "bump" {}

   [NoScaleOffset]_ColorMask("ColorMask", 2D) = "bump" {}
   [NoScaleOffset]_ColorMask1("ColorMask1", 2D) = "bump" {}
   [NoScaleOffset]_ColorMask2("ColorMask2", 2D) = "bump" {}
   [NoScaleOffset]_ColorMask3("ColorMask3", 2D) = "bump" {}
   
   // no AlphaMask for the base.
   [NoScaleOffset]_AlphaMask1("Mask1", 2D) = "white" {} 
   [NoScaleOffset]_AlphaMask2("Mask2", 2D) = "white" {} 
   [NoScaleOffset]_AlphaMask3("Mask3", 2D) = "white" {} 

	_RedColor ("RedColor", Color) = (1, 1, 1, 1)
	_GreenColor ("GreenColor", Color) = (1, 1, 1, 1)
	_BlueColor ("BlueColor", Color) = (1, 1, 1, 1)
	_AlphaColor ("AlphaColor", Color) = (1, 1, 1, 1)

END_PROPERTIES


// Any variables you want to have in the per material CBuffer go here.
BEGIN_CBUFFER
    half  _OverlayCount;
	half  _ColorModulation;
	half  _SmoothnessModulation;
	half  _MetallicModulation;
	half4 _RedColor;
	half4 _GreenColor;
	half4 _BlueColor;
	half4 _AlphaColor;

	float4 ColorTints[12] = 
	{
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f),
		float4(1f,1f,1f,1f)
	};

	float4 ColorAdds[12] =
	{
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
		float4(0f,0f,0f,0f),
	    float4(0f,0f,0f,0f),
    	float4(0f,0f,0f,0f)
	};
END_CBUFFER


// if you are writing a subshader, any defines that should be set on the main
// shader are defined here
BEGIN_DEFINES
END_DEFINES


// All code goes here

BEGIN_CODE

   TEXTURE2D(_Albedo);
   SAMPLER(sampler_Albedo);
   TEXTURE2D(_NormalMask);
   TEXTURE2D(_ColorMask);


   TEXTURE2D(_Albedo1);
   TEXTURE2D(_NormalMask1);
   TEXTURE2D(_AlphaMask1);
   TEXTURE2D(_ColorMask1);

   TEXTURE2D(_Albedo2);
   TEXTURE2D(_NormalMask2);
   TEXTURE2D(_AlphaMask2);
   TEXTURE2D(_ColorMask2);

   TEXTURE2D(_Albedo3);
   TEXTURE2D(_NormalMask3);
   TEXTURE2D(_AlphaMask3);
   TEXTURE2D(_ColorMask3);

    // MaskedNormal Format
    // R = Smooth
    // G = Normal Y
    // B = Metallic
    // A = Normal X

    half4 Colorize(half4 base_c,  half4 values,  int arrayIndex)
	{ 
	        /* float3 graycol = dot(base_c.rgb,float3(0.3,0.59,0.11));
      		   newcol = graycol * 2 * _RedColor.rgb; */

	    if (values.r > 0)
		{
		    half3 newcol = base_c.rgb * 2 * _RedColor.rgb;
		    base_c.rgb = lerp(base_c,newcol,values.r); 
		    base_c = (base_c * ColorTints[arrayIndex]) + ColorAdds[arrayIndex];
		}
	    if (values.g > 0)
		{
		    half3 newcol = base_c * 2 * _GreenColor.rgb;
		    base_c.rgb = lerp(base_c,newcol,values.g); 
		    base_c = (base_c * ColorTints[arrayIndex]) + ColorAdds[arrayIndex];
		}
	    if (values.b > 0)
		{
		    half3 newcol = base_c * 2 * _BlueColor.rgb;
		    base_c.rgb = lerp(base_c,newcol,values.b); 
		    base_c = (base_c * ColorTints[arrayIndex]) + ColorAdds[arrayIndex];
		}
		if (values.a > 0)
		{
		    half3 newcol = base_c * 2 * _AlphaColor.rgb;
		    base_c.rgb = lerp(base_c,newcol,values.a); 
		    base_c = (base_c * ColorTints[arrayIndex]) + ColorAdds[arrayIndex];
		}

		return base_c;
	}

	void SurfaceFunction(inout Surface o, ShaderData d)
	{
      float2 uv = d.texcoord0.xy;

	  half4 alb = SAMPLE_TEXTURE2D(_Albedo, sampler_Albedo, uv);
	  half4 mask = SAMPLE_TEXTURE2D(_ColorMask,sampler_Albedo,uv);
	 
	  half4 base_c = Colorize(alb,mask,0);
	  half4 basepackednormal = SAMPLE_TEXTURE2D(_NormalMask, sampler_Albedo,uv);

	  half3 base_n; 
      base_n.xy = basepackednormal.wy * 2 - 1;
      base_n.z = sqrt(1 - base_n.x*base_n.x - base_n.y * base_n.y);
      base_n = base_n * ColorTints[1].rgb + ColorAdds[1].rgb;

	  half base_smooth = basepackednormal.r;
	  half base_Metallic = basepackednormal.b;
	  o.Alpha = base_c.a; 


	  if (_OverlayCount > 1)
	  {
		  half4 add_c = Colorize(SAMPLE_TEXTURE2D(_Albedo1, sampler_Albedo, uv), SAMPLE_TEXTURE2D(_ColorMask1, sampler_Albedo,uv), 3);
		  half4 layernormal = (SAMPLE_TEXTURE2D(_NormalMask1, sampler_Albedo,uv));
 
		  half3 add_n;
          add_n.xy = layernormal.wy * 2 - 1;
          add_n.z = sqrt(1 - add_n.x*add_n.x - add_n.y * add_n.y);
		  add_n = add_n * ColorTints[4].rgb + ColorAdds[4].rgb;

		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask1, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  basepackednormal.rb = (layernormal.rb * alpha) + (basepackednormal * oneminus);

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
		  base_smooth = (basepackednormal.r * alpha) + (base_smooth * oneminus);
		  base_Metallic = (basepackednormal.b * alpha) + (base_Metallic * oneminus);
	  }


	  if (_OverlayCount > 2)
	  {
		  half4 add_c = Colorize(SAMPLE_TEXTURE2D(_Albedo2, sampler_Albedo, uv), SAMPLE_TEXTURE2D(_ColorMask2, sampler_Albedo,uv), 6);
		  half4 layernormal = (SAMPLE_TEXTURE2D(_NormalMask2, sampler_Albedo,uv));
		  
		  half3 add_n;
          add_n.xy = layernormal.wy * 2 - 1;
          add_n.z = sqrt(1 - add_n.x*add_n.x - add_n.y * add_n.y);
		  add_n = add_n * ColorTints[7].rgb + ColorAdds[7].rgb;

		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask2, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  basepackednormal.rb = (layernormal.rb * alpha) + (basepackednormal * oneminus);

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
		  base_smooth = (basepackednormal.r * alpha) + (base_smooth * oneminus);
		  base_Metallic = (basepackednormal.b * alpha) + (base_Metallic * oneminus);
	  }

	  if (_OverlayCount > 3)
	  {
		  half4 add_c = Colorize(SAMPLE_TEXTURE2D(_Albedo3, sampler_Albedo, uv), SAMPLE_TEXTURE2D(_ColorMask3, sampler_Albedo,uv), 9);
		  half4 layernormal = (SAMPLE_TEXTURE2D(_NormalMask3, sampler_Albedo,uv));
		  
		  half3 add_n;
          add_n.xy = layernormal.wy * 2 - 1;
          add_n.z = sqrt(1 - add_n.x*add_n.x - add_n.y * add_n.y);
		  add_n = add_n * ColorTints[10].rgb + ColorAdds[10].rgb;

		  float alpha = SAMPLE_TEXTURE2D(_AlphaMask2, sampler_Albedo, uv).a;
		  float oneminus = 1.0f-alpha;

		  basepackednormal.rb = (layernormal.rb * alpha) + (basepackednormal * oneminus);

		  base_c = (add_c * alpha) + (base_c * oneminus);
		  base_n = (add_n * alpha) + (base_n * oneminus);
		  base_smooth = (basepackednormal.r * alpha) + (base_smooth * oneminus);
		  base_Metallic = (basepackednormal.b * alpha) + (base_Metallic * oneminus);
	  }
	  
      o.Albedo = base_c * _ColorModulation;
	  o.Normal = base_n;
	  o.Metallic = base_Metallic * _MetallicModulation;
	  o.Smoothness = base_smooth * _SmoothnessModulation;
	}

END_CODE

